import { masks } from "@tamagui/themes"
import { createThemeBuilder } from "@tamagui/theme-builder"

// for now adding this type here to avoid TS issues inferring, will fix better soon
let maskOptions: Record<string, any> = {
  maskOptions0: {
    max: 13,
    min: 1,
    skip: {
      color1: 1,
      color2: 2,
      color3: 3,
      color4: 4,
      color5: 5,
      color6: 6,
      color7: 7,
      color8: 8,
      color9: 9,
      color10: 10,
      color11: 11,
      color12: 12,
      shadowColor: 0,
      shadowColorFocus: 0,
      shadowColorHover: 0,
      shadowColorPress: 0,
    },
    override: {
      color: 0,
      colorFocus: 0,
      colorHover: 0,
      colorPress: 0,
      shadowColor: 0,
      shadowColorFocus: 0,
      shadowColorHover: 0,
      shadowColorPress: 0,
    },
    overrideSwap: { accentColor: 0, accentBackground: 0 },
    overrideShift: {
      color: 0,
      colorFocus: 0,
      colorHover: 0,
      colorPress: 0,
      shadowColor: 0,
      shadowColorFocus: 0,
      shadowColorHover: 0,
      shadowColorPress: 0,
    },
  },
  maskOptions1: { theme: { background: "rgba(0,0,0,0.5)" } },
  maskOptions2: { theme: { background: "rgba(0,0,0,0.9)" } },
}

const palettes = {
  light_base: [
    "hsla(0, 0%, 99%, 0)",
    "hsla(0, 0%, 99%, 0.25)",
    "hsla(0, 0%, 99%, 0.5)",
    "hsla(0, 0%, 99%, 0.75)",
    "hsla(100, 0%, 99%, 1)",
    "hsla(100, 0%, 93%, 1)",
    "hsla(100, 0%, 88%, 1)",
    "hsla(100, 0%, 82%, 1)",
    "hsla(100, 0%, 77%, 1)",
    "hsla(100, 0%, 72%, 1)",
    "hsla(100, 0%, 66%, 1)",
    "hsla(100, 0%, 61%, 1)",
    "hsla(100, 0%, 55%, 1)",
    "hsla(100, 0%, 50%, 1)",
    "hsla(100, 0%, 15%, 1)",
    "hsla(100, 0%, 10%, 1)",
    "hsla(0, 0%, 10%, 0.75)",
    "hsla(0, 0%, 10%, 0.5)",
    "hsla(0, 0%, 10%, 0.25)",
    "hsla(0, 0%, 10%, 0)",
  ],
  dark_base: [
    "hsla(0, 0%, 10%, 0)",
    "hsla(0, 0%, 10%, 0.25)",
    "hsla(0, 0%, 10%, 0.5)",
    "hsla(0, 0%, 10%, 0.75)",
    "hsla(100, 0%, 10%, 1)",
    "hsla(100, 0%, 14%, 1)",
    "hsla(100, 0%, 19%, 1)",
    "hsla(100, 0%, 23%, 1)",
    "hsla(100, 0%, 28%, 1)",
    "hsla(100, 0%, 32%, 1)",
    "hsla(100, 0%, 37%, 1)",
    "hsla(100, 0%, 41%, 1)",
    "hsla(100, 0%, 46%, 1)",
    "hsla(100, 0%, 50%, 1)",
    "hsla(100, 0%, 93%, 1)",
    "hsla(100, 0%, 95%, 1)",
    "hsla(0, 0%, 95%, 0.75)",
    "hsla(0, 0%, 95%, 0.5)",
    "hsla(0, 0%, 95%, 0.25)",
    "hsla(0, 0%, 95%, 0)",
  ],
  light_accent: [
    "hsla(153, 71%, 20%, 0)",
    "hsla(153, 71%, 20%, 0.25)",
    "hsla(153, 71%, 20%, 0.5)",
    "hsla(153, 71%, 20%, 0.75)",
    "hsla(153, 71%, 20%, 1)", // color1 : background
    "hsla(48, 100%, 96%, 1)", // color2 : Substle BackgroundÂ²
    "hsla(153, 71%, 20%, 1)", // color3: UI Background
    "hsla(142, 70%, 49%, 1)", // color4: Hovezr UI Background
    "hsla(153, 71%, 20%, 1)", // color5: Active UI Background
    "hsla(142, 71%, 49%, 1)", // color6: Subtle border
    "hsla(142, 71%, 49%, 1)", // color7: Strong Border
    "hsla(142, 71%, 49%, 1)", // color8: Hover Border
    "hsla(153, 71%, 20%, 1)", // color9: Primary
    "hsla(148, 88%, 97%, 1)", // color10: Hover Primary
    "hsla(202, 76%, 8%, 1)", // color11: Subtle Text
    "hsla(202, 76%, 0%, 1)", // color12: Text
    "hsla(0, 0%, 0%, 0.75)",
    "hsla(0, 0%, 0%, 0.5)",
    "hsla(0, 0%, 0%, 0.25)",
    "hsla(0, 0%, 0%, 0)",
  ],
  dark_accent: [
    "hsla(153, 71%, 54%, 0)",
    "hsla(153, 71%, 54%, 0.25)",
    "hsla(153, 71%, 54%, 0.5)",
    "hsla(153, 71%, 54%, 0.75)",
    "hsla(153, 71%, 20%, 1)", // color1
    "hsla(153, 71%, 96%, 1)", // color2
    "hsla(153, 71%, 85%, 1)", // color3
    "hsla(153, 71%, 54%, 1)", // color4
    "hsla(153, 71%, 74%, 1)", // color5
    "hsla(153, 71%, 54%, 1)", // color6
    "hsla(153, 71%, 53%, 1)", // color7
    "hsla(153, 71%, 52%, 1)", // color8
    "hsla(153, 71%, 20%, 1)", // color9: Primary
    "hsla(153, 71%, 85%, 1)", // color10
    "hsla(202, 76%, 0%, 1)", // color11
    "hsla(48, 100%, 96%, 1)", // color12: Text
    "hsla(201, 76%, 8%, 0.75)",
    "hsla(201, 76%, 8%, 0.5)",
    "hsla(201, 76%, 8%, 0.25)",
    "hsla(201, 76%, 8%, 0)",
  ],
  light_green: [
    "hsla(160, 60%, 99%, 0)",
    "hsla(160, 60%, 99%, 0.25)",
    "hsla(160, 60%, 99%, 0.5)",
    "hsla(160, 60%, 99%, 0.75)",
    "hsla(153, 70%, 99%, 1)",
    "hsla(153, 70%, 93%, 1)",
    "hsla(153, 70%, 88%, 1)", 
    "hsla(153, 70%, 82%, 1)",
    "hsla(153, 70%, 77%, 1)",
    "hsla(153, 70%, 72%, 1)",
    "hsla(153, 70%, 66%, 1)",
    "hsla(153, 70%, 61%, 1)",
    "hsla(153, 70%, 55%, 1)",
    "hsla(153, 70%, 50%, 1)",
    "hsla(153, 70%, 15%, 1)",
    "hsla(153, 70%, 10%, 1)",
    "hsla(153, 69%, 10%, 0.75)",
    "hsla(153, 69%, 10%, 0.5)",
    "hsla(153, 69%, 10%, 0.25)",
    "hsla(153, 69%, 10%, 0)",
  ],
  dark_green: [
    "hsla(153, 69%, 10%, 0)",
    "hsla(153, 69%, 10%, 0.25)",
    "hsla(153, 69%, 10%, 0.5)",
    "hsla(153, 69%, 10%, 0.75)",
    "hsla(153, 70%, 10%, 1)",
    "hsla(153, 70%, 14%, 1)",
    "hsla(153, 70%, 19%, 1)",
    "hsla(153, 70%, 23%, 1)",
    "hsla(153, 70%, 28%, 1)",
    "hsla(153, 70%, 32%, 1)",
    "hsla(153, 70%, 37%, 1)",
    "hsla(153, 70%, 41%, 1)",
    "hsla(153, 70%, 46%, 1)",
    "hsla(153, 70%, 50%, 1)",
    "hsla(153, 70%, 93%, 1)",
    "hsla(153, 70%, 95%, 1)",
    "hsla(153, 69%, 95%, 0.75)",
    "hsla(153, 69%, 95%, 0.5)",
    "hsla(153, 69%, 95%, 0.25)",
    "hsla(153, 69%, 95%, 0)",
  ],
  light_yellow: [
    "hsla(60, 60%, 99%, 0)",
    "hsla(60, 60%, 99%, 0.25)",
    "hsla(60, 60%, 99%, 0.5)",
    "hsla(60, 60%, 99%, 0.75)",
    "hsla(48, 70%, 99%, 1)",
    "hsla(48, 70%, 93%, 1)",
    "hsla(48, 70%, 88%, 1)",
    "hsla(48, 70%, 82%, 1)",
    "hsla(48, 70%, 77%, 1)",
    "hsla(48, 70%, 72%, 1)",
    "hsla(48, 70%, 66%, 1)",
    "hsla(48, 70%, 61%, 1)",
    "hsla(48, 70%, 55%, 1)",
    "hsla(48, 70%, 50%, 1)",
    "hsla(48, 70%, 15%, 1)",
    "hsla(48, 70%, 10%, 1)",
    "hsla(48, 69%, 10%, 0.75)",
    "hsla(48, 69%, 10%, 0.5)",
    "hsla(48, 69%, 10%, 0.25)",
    "hsla(48, 69%, 10%, 0)",
  ],
  dark_yellow: [
    "hsla(48, 69%, 10%, 0)",
    "hsla(48, 69%, 10%, 0.25)",
    "hsla(48, 69%, 10%, 0.5)",
    "hsla(48, 69%, 10%, 0.75)",
    "hsla(48, 70%, 10%, 1)",
    "hsla(48, 70%, 14%, 1)",
    "hsla(48, 70%, 19%, 1)",
    "hsla(48, 70%, 23%, 1)",
    "hsla(48, 70%, 28%, 1)",
    "hsla(48, 70%, 32%, 1)",
    "hsla(48, 70%, 37%, 1)",
    "hsla(48, 70%, 41%, 1)",
    "hsla(48, 70%, 46%, 1)",
    "hsla(48, 70%, 50%, 1)",
    "hsla(48, 70%, 93%, 1)",
    "hsla(48, 70%, 95%, 1)",
    "hsla(50, 69%, 95%, 0.75)",
    "hsla(50, 69%, 95%, 0.5)",
    "hsla(50, 69%, 95%, 0.25)",
    "hsla(50, 69%, 95%, 0)",
  ],
  light_red: [
    "hsla(0, 60%, 99%, 0)",
    "hsla(0, 60%, 99%, 0.25)",
    "hsla(0, 60%, 99%, 0.5)",
    "hsla(0, 60%, 99%, 0.75)",
    "hsla(0, 70%, 99%, 1)",
    "hsla(0, 70%, 93%, 1)",
    "hsla(0, 70%, 88%, 1)",
    "hsla(0, 70%, 82%, 1)",
    "hsla(0, 70%, 77%, 1)",
    "hsla(0, 70%, 72%, 1)",
    "hsla(0, 70%, 66%, 1)",
    "hsla(0, 70%, 61%, 1)",
    "hsla(0, 70%, 55%, 1)",
    "hsla(0, 70%, 50%, 1)",
    "hsla(0, 70%, 15%, 1)",
    "hsla(0, 70%, 10%, 1)",
    "hsla(0, 69%, 10%, 0.75)",
    "hsla(0, 69%, 10%, 0.5)",
    "hsla(0, 69%, 10%, 0.25)",
    "hsla(0, 69%, 10%, 0)",
  ],
  dark_red: [
    "hsla(0, 69%, 10%, 0)",
    "hsla(0, 69%, 10%, 0.25)",
    "hsla(0, 69%, 10%, 0.5)",
    "hsla(0, 69%, 10%, 0.75)",
    "hsla(0, 70%, 10%, 1)",
    "hsla(0, 70%, 14%, 1)",
    "hsla(0, 70%, 19%, 1)",
    "hsla(0, 70%, 23%, 1)",
    "hsla(0, 70%, 28%, 1)",
    "hsla(0, 70%, 32%, 1)",
    "hsla(0, 70%, 37%, 1)",
    "hsla(0, 70%, 41%, 1)",
    "hsla(0, 70%, 46%, 1)",
    "hsla(0, 70%, 50%, 1)",
    "hsla(0, 70%, 93%, 1)",
    "hsla(0, 70%, 95%, 1)",
    "hsla(0, 69%, 95%, 0.75)",
    "hsla(0, 69%, 95%, 0.5)",
    "hsla(0, 69%, 95%, 0.25)",
    "hsla(0, 69%, 95%, 0)",
  ],
}

const templates = {
  base: {
    color: -5,
    color0: -4,
    color1: 4,
    color2: 5,
    color3: 6,
    color4: 7,
    color5: 8,
    color6: 9,
    color7: 10,
    color8: 11,
    color9: 12,
    color05: -2,
    color10: 13,
    color11: 14,
    color12: 15,
    color025: -3,
    color075: -1,
    background: 4,
    colorFocus: -6,
    colorHover: -6,
    colorPress: -5,
    accentColor: "$accent.-4",
    background0: 1,
    borderColor: 7,
    background05: 3,
    background025: 2,
    background075: 4,
    backgroundFocus: 7,
    backgroundHover: 5,
    backgroundPress: 6,
    accentBackground: "$accent.4",
    borderColorFocus: 9,
    borderColorHover: 8,
    borderColorPress: 8,
    placeholderColor: -6,
  },
  surface: {
    color: -5,
    color0: -4,
    color1: 4,
    color2: 5,
    color3: 6,
    color4: 7,
    color5: 8,
    color6: 9,
    color7: 10,
    color8: 11,
    color9: 12,
    color05: -2,
    color10: 13,
    color11: 14,
    color12: 15,
    color025: -3,
    color075: -1,
    background: 7,
    colorFocus: -6,
    colorHover: -6,
    colorPress: -5,
    accentColor: "$accent.-4",
    background0: 1,
    borderColor: 10,
    background05: 3,
    background025: 2,
    background075: 4,
    backgroundFocus: 10,
    backgroundHover: 8,
    backgroundPress: 9,
    accentBackground: "$accent.4",
    borderColorFocus: 12,
    borderColorHover: 11,
    borderColorPress: 11,
    placeholderColor: -6,
  },
}

export const themes = createThemeBuilder()
  .addPalettes(palettes)
  .addTemplates(templates)
  .addMasks(masks)
  .addThemes({
    light: { template: "base", palette: "light_base" },
    dark: { template: "base", palette: "dark_base" },
  })
  .addChildThemes({
    error: [
      { parent: "dark", template: "base", palette: "red" },
      { parent: "light", template: "base", palette: "red" },
    ],
    warning: [
      { parent: "dark", template: "base", palette: "yellow" },
      { parent: "light", template: "base", palette: "yellow" },
    ],
    success: [
      { parent: "dark", template: "base", palette: "green" },
      { parent: "light", template: "base", palette: "green" },
    ],
  })
  .addChildThemes({
    accent: [
      { parent: "light", template: "base", palette: "light_accent" },
      { parent: "dark", template: "base", palette: "dark_accent" },
    ],
  })
  .addChildThemes({
    Card: { mask: "soften", ...maskOptions.maskOptions0 },
    Input: { mask: "softenBorder2", ...maskOptions.maskOptions0 },
    Button: [
      { parent: "light_accent", template: "surface", palette: "light_accent" },
      { parent: "dark_accent", template: "surface", palette: "dark_accent" },
      { parent: "light", mask: "soften2", ...maskOptions.maskOptions0 },
      { parent: "dark", mask: "soften2", ...maskOptions.maskOptions0 },
    ],
    Switch: [
      { parent: "light_accent", template: "surface", palette: "light_accent" },
      { parent: "dark_accent", template: "surface", palette: "dark_accent" },
      { parent: "light", mask: "soften2", ...maskOptions.maskOptions0 },
      { parent: "dark", mask: "soften2", ...maskOptions.maskOptions0 },
    ],
    Tooltip: { mask: "inverse", ...maskOptions.maskOptions0 },
    Checkbox: { mask: "softenBorder2", ...maskOptions.maskOptions0 },
    Progress: { mask: "soften", ...maskOptions.maskOptions0 },
    TextArea: { mask: "softenBorder2", ...maskOptions.maskOptions0 },
    DrawerFrame: { mask: "soften", ...maskOptions.maskOptions0 },
    SliderThumb: { mask: "inverse", ...maskOptions.maskOptions0 },
    SliderTrack: { mask: "soften2", ...maskOptions.maskOptions0 },
    SwitchThumb: { mask: "inverse", ...maskOptions.maskOptions0 },
    ModalOverlay: [
      { parent: "light", ...maskOptions.maskOptions1 },
      { parent: "dark", ...maskOptions.maskOptions2 },
    ],
    SheetOverlay: [
      { parent: "light", ...maskOptions.maskOptions1 },
      { parent: "dark", ...maskOptions.maskOptions2 },
    ],
    TooltipArrow: { mask: "soften", ...maskOptions.maskOptions0 },
    DialogOverlay: [
      { parent: "light", ...maskOptions.maskOptions1 },
      { parent: "dark", ...maskOptions.maskOptions2 },
    ],
    RadioGroupItem: { mask: "softenBorder2", ...maskOptions.maskOptions0 },
    TooltipContent: { mask: "soften2", ...maskOptions.maskOptions0 },
    ProgressIndicator: { mask: "inverse", ...maskOptions.maskOptions0 },
    SliderTrackActive: { mask: "inverseSoften", ...maskOptions.maskOptions0 },
  })
  .build()
